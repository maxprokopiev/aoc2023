(defun read-file (filename)
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))

(setq sample-input (mapcar (lambda (line) (cdr (butlast (split-string line "")))) (butlast (split-string (read-file "sample.txt") "\n"))))
(setq input (mapcar (lambda (line) (cdr (butlast (split-string line "")))) (butlast (split-string (read-file "input.txt") "\n"))))

(defun get (x y input)
  (cond
   ((>= y (length input))
    ".")
   ((>= x (length (nth y input)))
    ".")
   (t
    (nth x (nth y input)))))

(defun is-num (c)
  (string-match "[0-9]" c))

(defun is-symbol (c)
  (string-match "[^0-9.]" c))

(defun is-dot (c)
  (string-match "\\." c))

(defun is-part-number (x y input)
  (or (is-symbol (get (- x 1) y input))
      (is-symbol (get (- x 1) (+ y 1) input))
      (is-symbol (get x (+ y 1) input))
      (is-symbol (get (+ x 1) (+ y 1) input))
      (is-symbol (get (+ x 1) y input))
      (is-symbol (get (+ x 1) (- y 1) input))
      (is-symbol (get x (- y 1) input))
      (is-symbol (get (- x 1) (- y 1) input))))

(defun find-gears (x y input)
  (setq res '())
  (if (string= "*" (get (- x 1) y input))
    (push (list (- x 1) y) res))
  (if (string= "*" (get (- x 1) (+ y 1) input))
    (push (list (- x 1) (+ y 1)) res))
  (if (string= "*" (get x (+ y 1) input))
    (push (list x (+ y 1)) res))
  (if (string= "*" (get (+ x 1) (+ y 1) input))
    (push (list (+ x 1) (+ y 1)) res))
  (if (string= "*" (get (+ x 1) y input))
    (push (list (+ x 1) y) res))
  (if (string= "*" (get (+ x 1) (- y 1) input))
    (push (list (+ x 1)  (- y 1)) res))
  (if (string= "*" (get x (- y 1) input))
    (push (list x (- y 1)) res))
  (if (string= "*" (get (- x 1) (- y 1) input))
      (push (list (- x 1) (- y 1)) res))
  res)

(defun solve (input)
  (setq nums '())
  (setq curnum "")
  (setq global-gears (make-hash-table :test 'equal))
  (setq gears (make-hash-table :test 'equal))
  (dotimes (y (length input))
     (if ispart
       (when (> (length curnum) 0)
	 (dolist (gear (hash-table-keys gears))
	   (let ((gear-parts (gethash gear global-gears)))
	     (puthash gear (push curnum gear-parts) global-gears)))
	 (clrhash gears)
         (push curnum nums)))
    (setq ispart nil)
    (dotimes (x (length (nth y input)))
      (let ((cur (get x y input)))
	(cond
	 ((is-num cur)
	  (if (eq ispart nil)
	    (setq ispart (is-part-number x y input)))
	  (let ((found-gears (find-gears x y input)))
	    (when found-gears
	        (dolist (gear found-gears)
		  (puthash gear t gears))))
	  (setq curnum (concat curnum cur)))
	 ((is-symbol cur)
	  (if ispart
	    (when (> (length curnum) 0)
	      (dolist (gear (hash-table-keys gears))
		(let ((gear-parts (gethash gear global-gears)))
		  (puthash gear (push curnum gear-parts) global-gears)))
	      (clrhash gears)
	      (push curnum nums)))
	  (setq ispart nil)
	  (setq curnum ""))
	 ((is-dot cur)
	  (if ispart
	    (when (> (length curnum) 0)
	      (dolist (gear (hash-table-keys gears))
		(let ((gear-parts (gethash gear global-gears)))
		  (puthash gear (push curnum gear-parts) global-gears)))
	      (clrhash gears)
	      (push curnum nums)))
	  (setq ispart nil)
	  (setq curnum ""))))))
  (setq sum 0)
  (maphash
   (lambda (k v)
     (when (= 2 (length v))
       (setq sum (+ sum (* (string-to-number (nth 0 v)) (string-to-number (nth 1 v)))))))
   global-gears)
  (message "sum: %s" sum)
  (seq-reduce #'+ (mapcar #'string-to-number nums) 0))

(message "%s" (solve sample-input)) ; 4361 | 467835
(message "%s" (solve input)) ; 550934 | 81997870
